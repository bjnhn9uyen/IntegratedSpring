#configuration properties are nothing more than properties of beans
#server:
#  port: 8080

spring:
#  security:
#    user:
#      name: user0000
#      password: aA@00000
#  h2:#    console:#      enabled: true
#  datasource:
#    url: jdbc:h2:mem:testdb
  jpa:
    hibernate.ddl-auto: create
    show-sql: true
    generate-ddl: true
  datasource:
    data: classpath:ingredients.sql
    initialization-mode: always
    
    
#This sets the base path for Spring Data REST end-points to /api. Consequently, the ingredients end-point is now /api/ingredients (similiar for other end-points)
  data:
    rest:
      base-path: /api
    
#Activating Spring profiles. See Spring profiles down below, after three hyphens ---
#  profiles:
#    active:
#      - prod

#Spring profiles
#For example, for development and debugging purposes, you want to use the embedded H2 database, and you want the logging to be set to DEBUG. 
#But in production, you want to use an external MySQL database and set the logging levels to WARN.
#What you need is to define a profile with properties suited for production.
#One way to define profile-specific properties is to create yet another YAML or properties file containing only the properties for production.
#Another way (works only with YAML) is placing profile-specific properties alongside non-profiled properties in application.yml, 
#separated by three hyphens and the spring.profiles property to name the profile. 
---
#All configs below OVERRIDE the default's configs, not REPLACE the whole default. The rest of default's configs (which not overriden) still remain active
spring:
  profiles: prod
  
#If this profile is active, the data-source properties will be set to use the external MySQL/PostgreSQL database instead of H2 database (default profile)
  datasource:
    url: jdbc:mysql://localhost/tacocloud
    username: root
    password: admin
    initialization-mode: always
    data: classpath:ingredients.sql
      
  jpa:
    generate-ddl: true
   
#Likewise, the logging.level.tacos property will be overridden with WARN instead of DEBUG (default profile)
logging:
  level:
    tacos: WARN    
